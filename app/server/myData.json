{
  "Projects": [
    {
      "name": "Page Replacement Algos",
      "image": "/PgRplcAlgos.png",
      "imageArr": [
        "/PgRplcAlgos.png",
        "/nVals.png",
        "/mVals.png"
      ],
      "skills": "C, Python",
      "link": "https://github.com/MirzaHB/Page-Replacement-Algos",
      "description": " developed simulators for four page replacement algorithms: Optimal, FIFO, LRU, and Second Chance (Clock), using C to evaluate memory management efficiency through page fault and write-back rates across different memory conditions. The Second Chance (Clock) algorithm, commonly used in Linux systems, was a central focus. I explored how the number of reference bits (n) and number of references (m) before shifting the reference register impacted performance. Tuning the m value was crucial: a low m failed to capture enough history, leading to more frequent page faults, while a high m retained too much irrelevant data, causing inefficiency. I used Python to generate graphs that visualized the performance of each algorithm, offering clear insights into how different configurations affected memory efficiency."
    },
    {
      "name": "LED Controller",
      "image": "/EmbeddedSystems.png",
      "imageArr": [
        "/EmbeddedSystems.png"
      ],
      "link": "https://github.com/MirzaHB/LED-Controller",
      "skills": "C, Python, Embedded systems",
      "description": "This project demonstrates a microcontroller-based LED control system designed for my Embedded Systems course at the University of Calgary. Using the PIC24F16K101 microcontroller and the MPLAB IDE, I developed a control app that adjusts LED brightness through Pulse Width Modulation (PWM) signals. The brightness is controlled via push buttons and a potentiometer, allowing real-time intensity adjustments between 0% and 100%. I utilized UART and Timer peripherals to capture voltages and regulate LED delays, ensuring precise control. A Python script was integrated to capture and graph the PWM intensity levels and voltage output over time, presenting the results visually. The system was optimized for power efficiency using interrupt-based button debouncing and power-saving modes such as clock switching and idle modes. This project reflects my ability to work with low-level hardware and real-time data, showcasing my skills in embedded systems and real-time software development."
    },
    {
      "name": "Potentiometer Voltage Capture",
      "image": "/EmbeddedSystems.png",
      "imageArr": [
        "/EmbeddedSystems.png",
        "/ADCBufferVsTime.png",
        "/ADCVoltageVsTime.png"
      ],
      "link": "https://github.com/MirzaHB/PotentiometerVoltageCapture",
      "skills": "C, Python, Embedded systems",
      "description": "In this project, I developed a microcontroller-based LED control system using the PIC24F16K101 microcontroller and the MPLAB IDE. The system utilized UART and Timer peripherals to capture voltages and regulate LED delays, while Pulse Width Modulation (PWM) signals controlled the brightness of the LED based on potentiometer and push button inputs. This setup enabled real-time adjustments to the LED’s brightness, ensuring smooth transitions between intensity levels. I integrated a Python script to capture, store, and visually graph the PWM intensity levels and voltage output over time, providing a clear representation of the system's performance. To optimize the system, I implemented interrupt-based button debouncing and energy-saving modes through clock switching and idle modes. The project was built using ANSI C for precise low-level hardware control and real-time performance optimization."
    },
    {
      "name": "CPU Scheduler",
      "image": "/proj4Pic2.png",
      "imageArr": [
        "/proj4Pic1.png",
        "/proj4Pic2.png",
        "/proj4Pic3.png"
      ],
      "link": "https://github.com/MirzaHB/CPU-Scheduler",
      "skills": "C, Python",
      "description": "In this assignment, I developed and explored several key CPU scheduling algorithms, including First-Come-First-Served (FCFS), Shortest Job First (SJF), Priority Scheduling, Round Robin (RR), and Shortest Remaining Time (SRT) with exponential averaging. Each of these algorithms approaches process scheduling with a different strategy, which allowed me to compare their impact on key performance metrics such as average waiting time, turnaround time, and response time. I ran simulations using a dataset of processes with varying arrival times and CPU burst lengths, generating graphs to visualize how different algorithms perform under various conditions, particularly as I adjusted parameters like time quantum in Round Robin. This exploration deepened my understanding of the trade-offs inherent in CPU scheduling, such as fairness versus efficiency and the impact of preemptive versus non-preemptive strategies. One of the most fascinating parts of this assignment was implementing the SRT algorithm with exponential averaging, which uses historical burst times to predict future bursts. This predictive approach adds intelligence to the scheduling process by estimating how long each process will run based on its past behavior. Through my simulations, I learned that exponential averaging, controlled by the α (alpha) parameter, allows the system to dynamically adjust to processes with changing CPU needs. A lower α value smooths out fluctuations, while a higher α makes the scheduler more responsive to recent changes. This method significantly improved the system’s ability to anticipate which processes should be prioritized, balancing turnaround time and preventing process starvation. Ultimately, the combination of SRT with exponential averaging showcased the power of predictive models in refining CPU scheduling decisions, making the system smarter and more adaptable to diverse workloads."
    },
    {
      "name": "Interactive Location Finder",
      "image": "/proj1Pic2.png",
      "imageArr": [
        "/proj1Pic1.png",
        "/proj1Pic2.png",
        "/proj1Pic3.png",
        "/proj1Pic4.png"
      ],
      "link": "https://github.com/MirzaHB/Where2Go",
      "skills": "React, JavaScript, Tailwind, Google Place API, NextJS",
      "description": "I've developed a React-based application that leverages the user's location and the Places API for a seamless location discovery experience. Users can search for their desired destinations, and the app displays them on an interactive map with clearly marked locations. Additionally, users can quickly select places from a curated list for added convenience. The app also offers essential features such as Google login and a sleek dark mode for enhanced usability. To make the user experience even more intuitive, the app presents search results in a scrollable list, enabling users to click on any entry to see its location instantly displayed on the map with a marker and description. Another feature is the built-in distance filter, which refines search results based on proximity, helping users easily identify nearby destinations. With this app, I've aimed to provide a user-friendly and feature-packed tool for location exploration. This project is still under development"
    },
    {
      "name": "Wildlife Rescue Schedule Planner",
      "image": "/proj2Pic1.png",
      "imageArr": [
        "/proj2Pic1.png",
        "/proj2Pic2.png"
      ],
      "link": "https://github.com/MirzaHB/JavaFinalProject/tree/main",
      "skills": "Java, SQL",
      "description": "My team and I collaborated on a Java-based scheduling application with a SQL database, tailored for a wildlife rescue center. This versatile tool has streamlined worker allocation, reducing administrative overhead by 100%. Employing object-oriented programming principles, we've ensured a modular and maintainable codebase. Additionally, we integrated a data caching mechanism to enhance data retrieval efficiency and designed an intuitive GUI for easy schedule creation and management. This application creates an hour-by-hour schedule, covering all the day's tasks efficiently. To ensure reliability, our team implemented a suite of unit tests, guaranteeing the software's functionality and performance."
    },
    {
      "name": "Notes App",
      "image": "/proj3Pic1.png",
      "imageArr": [
        "/proj3Pic1.png",
        "/proj3Pic2.png",
        "/proj3Pic3.png"
      ],
      "link": "https://github.com/MirzaHB/LotionApp",
      "skills": "React, Javascript, CSS",
      "description": "I've developed a feature-rich notes app using React, JavaScript, and CSS. This application boasts a versatile text editor that allows users to craft their notes with various fonts and a plethora of customization options. The side panel conveniently displays all created notes, complete with their creation timestamps. Users can effortlessly save, edit, or delete notes, and the app seamlessly stores or removes them in local storage. It's a user-friendly and efficient solution for organizing thoughts and ideas."
    }
  ]
}